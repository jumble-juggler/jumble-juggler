/**
* @author h@jjoujti
* Copyright (C)2023. All rights reserved.
* This code is licensed under the MIT License.
*/
package io.github.jumblejuggler;

import io.github.jumblejuggler.exceptions.JumbleJugglerException;
import java.util.concurrent.ThreadLocalRandom;

/**
 * Utility class for generating random bytes with various constraints.
 *
 * <p>This class provides methods for generating random bytes within specified ranges, with specific
 * signs, and with a given length. It also handles constraints such as minimum and maximum values,
 * positivity, and negativity.
 *
 * <p>Example usage:
 *
 * <pre>{@code
 * // Get a random byte within a specified range
 * try {
 *     byte randomByteInRange = ByteJuggler.generateRandomByteBetween(10, 50);
 * } catch (JumbleJugglerException e) {
 *     // Handle exception
 * }
 *
 * // Get a random positive byte greater than a specified minimum value
 * try {
 *     byte randomPositiveByte = ByteJuggler.generateRandomPositiveByteGreaterThan(5);
 * } catch (JumbleJugglerException e) {
 *     // Handle exception
 * }
 * }</pre>
 *
 * <p>The class throws {@link JumbleJugglerException} for exceptional cases, such as invalid
 * constraints or when a negative value is provided where only positive values are allowed.
 *
 * @see JumbleJugglerException
 */
public class ByteJuggler {
  private static final String BAD_NEGATIVE = "The value given is %s, but it must be positive.";
  private static final String BAD_POSITIVE = "The value given is %s, but it must be negative.";
  private static final String BAD_BOUND =
      "The minimum value given is %s, but it must be smaller than the maximum value given which is %s.";

  private ByteJuggler() {}

  /**
   * Generates a random byte.
   *
   * @return A randomly generated byte.
   */
  public static byte generateRandomByte() {
    return (byte) ThreadLocalRandom.current().nextInt(Byte.MIN_VALUE, Byte.MAX_VALUE);
  }

  /**
   * Generates a random positive byte.
   *
   * @return A randomly generated positive byte.
   */
  public static byte generateRandomPositiveByte() {
    return (byte) ThreadLocalRandom.current().nextInt(Byte.MAX_VALUE);
  }

  /**
   * Generates a random negative byte.
   *
   * @return A randomly generated negative byte.
   */
  public static byte generateRandomNegativeByte() {
    return (byte) ThreadLocalRandom.current().nextInt(Byte.MIN_VALUE, 0);
  }

  /**
   * Generates a random byte smaller than a specified maximum value.
   *
   * @param max The exclusive upper bound for the generated byte.
   * @return A randomly generated byte smaller than the specified maximum.
   */
  public static byte generateRandomByteSmallerThan(byte max) {
    return (byte) ThreadLocalRandom.current().nextInt(Byte.MIN_VALUE, max);
  }

  /**
   * Generates a random byte greater than a specified minimum value.
   *
   * @param min The inclusive lower bound for the generated byte.
   * @return A randomly generated byte greater than the specified minimum.
   */
  public static byte generateRandomByteGreaterThan(byte min) {
    return (byte) ThreadLocalRandom.current().nextInt(min, Byte.MAX_VALUE);
  }

  /**
   * Generates a random positive byte smaller than a specified maximum value.
   *
   * @param max The exclusive upper bound for the generated positive byte.
   * @return A randomly generated positive byte smaller than the specified maximum.
   * @throws JumbleJugglerException if the provided maximum value is negative.
   */
  public static byte generateRandomPositiveByteSmallerThan(byte max) throws JumbleJugglerException {
    if (max < 0) {
      throw new JumbleJugglerException(
          new IllegalArgumentException(String.format(BAD_NEGATIVE, max)), ByteJuggler.class);
    }
    return (byte) ThreadLocalRandom.current().nextInt(max);
  }

  /**
   * Generates a random positive byte greater than a specified minimum value.
   *
   * @param min The inclusive lower bound for the generated positive byte.
   * @return A randomly generated positive byte greater than the specified minimum.
   * @throws JumbleJugglerException if the provided minimum value is negative.
   */
  public static byte generateRandomPositiveByteGreaterThan(byte min) throws JumbleJugglerException {
    if (min < 0) {
      throw new JumbleJugglerException(
          new IllegalArgumentException(String.format(BAD_NEGATIVE, min)), ByteJuggler.class);
    }
    return generateRandomByteGreaterThan(min);
  }

  /**
   * Generates a random negative byte smaller than a specified maximum value.
   *
   * @param max The exclusive upper bound for the generated negative byte.
   * @return A randomly generated negative byte smaller than the specified maximum.
   * @throws JumbleJugglerException if the provided maximum value is positive.
   */
  public static byte generateRandomNegativeByteSmallerThan(byte max) throws JumbleJugglerException {
    if (max > 0) {
      throw new JumbleJugglerException(
          new IllegalArgumentException(String.format(BAD_POSITIVE, max)), ByteJuggler.class);
    }
    return generateRandomByteSmallerThan(max);
  }

  /**
   * Generates a random negative byte greater than a specified minimum value.
   *
   * @param min The inclusive lower bound for the generated negative byte.
   * @return A randomly generated negative byte greater than the specified minimum.
   * @throws JumbleJugglerException if the provided minimum value is positive.
   */
  public static byte generateRandomNegativeByteGreaterThan(byte min) throws JumbleJugglerException {
    if (min > 0) {
      throw new JumbleJugglerException(
          new IllegalArgumentException(String.format(BAD_POSITIVE, min)), ByteJuggler.class);
    }
    return (byte) ThreadLocalRandom.current().nextInt(min, 0);
  }

  /**
   * Generates a random byte between a specified minimum and maximum value.
   *
   * @param min The inclusive lower bound for the generated byte.
   * @param max The exclusive upper bound for the generated byte.
   * @return A randomly generated byte within the specified range.
   * @throws JumbleJugglerException if the minimum value is greater than the maximum value.
   */
  public static byte generateRandomByteBetween(byte min, byte max) throws JumbleJugglerException {
    if (min > max) {
      throw new JumbleJugglerException(
          new IllegalArgumentException(String.format(BAD_BOUND, min, max)), ByteJuggler.class);
    }
    return (byte) ThreadLocalRandom.current().nextInt(min, max);
  }
}
